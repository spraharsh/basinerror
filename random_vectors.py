"""
This file generates an n-dimensional gaussian vector
"""


from numpy.random import Generator, PCG64, SeedSequence
import numpy as np



def generate_random_unit_gauss(n_part, n_dim, seed):
    """ gets a Random gaussian vector normalized to unity
    """
    rng = Generator(PCG64(seed))
    vec = rng.standard_normal(n_part*n_dim)
    return vec/np.linalg.norm(vec)


def generate_random_unit_gauss_3(n_part, n_dim, seed):
    """ gets a random unit gaussian vector normalized to unity
        and gets two orthogonalized vectors generated the same way
    """
    vec_1 = generate_random_unit_gauss(n_part, n_dim, seed)
    #  100000000 to make sure the samples are uncorrelated
    vec_2 = generate_random_unit_gauss(n_part, n_dim, seed + 1000000)
    vec_3 = generate_random_unit_gauss(n_part, n_dim, seed + 100000000)

    o_vec_2 = vec_2 - vec_1*np.dot(vec_1, vec_2)
    n_o_vec_2 = o_vec_2/np.linalg.norm(o_vec_2)

    o_vec_3 = vec_3 - vec_1*np.dot(vec_1, vec_3) - n_o_vec_2*np.dot(n_o_vec_2, vec_3)
    n_o_vec_3 = o_vec_3/np.linalg.norm(o_vec_3)
    return (vec_1, n_o_vec_2, n_o_vec_3)



# A few samples are stored as global constants so that they stay indpendent
# TODO, put these in a dictionary
VEC_8_0= np.array([ 0.37680497, -0.47184001,  0.07719156, -0.10482454, -0.08357044,
                    -0.03980466, -0.37294022, -0.04282055, -0.15974008,  0.61350924,
                    0.04168588, -0.06510451, -0.05193273, -0.12333815, -0.19480732,
                    -0.07215168])
VEC_8_1= np.array([ 0.14050994,  0.08092133, -0.07078157,  0.20821576, -0.18963555,
                    -0.50194207,  0.57004134, -0.31329859,  0.07535954,  0.17694161,
                    0.1183749 , -0.05262925, -0.23631652, -0.1348588 , -0.11593208,
                    -0.27035486])
VEC_8_2= np.array([-0.18634263, -0.16557435, -0.19934225, -0.43892896, -0.08720741,
                   0.29204636,  0.18598731,  0.01786844, -0.16762533, -0.15634054,
                   -0.13132881, -0.10620912, -0.47931628,  0.17621439, -0.4384823 ,
                   -0.20863423])
VEC_16_0 = np.array([ 0.32430757, -0.40610209,  0.06643704, -0.09022013, -0.0719272 ,
                      -0.03425897, -0.32098126, -0.03685468, -0.1374847 ,  0.52803362,
                      0.0358781 , -0.05603399, -0.04469733, -0.10615437, -0.16766628,
                      -0.06209933,  0.07658243, -0.03790681,  0.15219045, -0.0317491 ,
                      0.00385491,  0.24563512,  0.08661874, -0.08028221, -0.02905361,
                      0.08589091,  0.30749073, -0.0428434 , -0.03870213,  0.15927034,
                      -0.14086088, -0.04635513])
VEC_16_1 = np.array([ 0.08709702,  0.08730335, -0.05827212,  0.16482546, -0.14046317,
                      -0.38156983,  0.45588474, -0.23719626,  0.06622289,  0.1021844 ,
                      0.08824549, -0.03672262, -0.17785497, -0.09644407, -0.07812162,
                      -0.2027858 , -0.03039747, -0.24569697, -0.0942335 ,  0.1345063 ,
                      -0.10389081,  0.08751275, -0.09444126, -0.12126744,  0.11577923,
                      -0.00185031, -0.09808463, -0.1336156 , -0.09810715,  0.0239074 ,
                      -0.26324817, -0.40245637])
VEC_16_2 = np.array([-0.16714892, -0.08774775, -0.15064882, -0.3177339 , -0.05436319,
                     0.22600298,  0.1539943 ,  0.02184492, -0.11236463, -0.1634012 ,
                     -0.10149471, -0.07209995, -0.34339388,  0.14077131, -0.30496308,
                     -0.14281407, -0.01646055,  0.29562108,  0.1256131 , -0.20630235,
                     0.13277429,  0.14847931, -0.08516799, -0.17430959,  0.24970868,
                     -0.17616183,  0.02607798,  0.03969108,  0.18155815, -0.09067344,
                     -0.30945805, -0.02492259])

VEC_32_0 = np.array([ 0.23874134, -0.29895496,  0.0489081 , -0.06641619, -0.05294972,
                      -0.02521999, -0.23629265, -0.02713084, -0.10121034,  0.38871572,
                      0.02641192, -0.04124982, -0.03290426, -0.0781463 , -0.12342873,
                      -0.04571487,  0.0563767 , -0.02790537,  0.11203609, -0.02337233,
                      0.00283782,  0.18082605,  0.06376501, -0.05910033, -0.02138802,
                      0.0632292 ,  0.22636149, -0.03153947, -0.02849085,  0.117248  ,
                      -0.10369575, -0.03412466,  0.10323708,  0.06788781,  0.01070538,
                      0.07838704, -0.33083097,  0.11946978, -0.11225671, -0.19519075,
                      0.0323379 ,  0.08194789, -0.05202772, -0.12591512,  0.00305601,
                      -0.00617024,  0.16442317,  0.08742982,  0.02267204,  0.13003592,
                      -0.02404154, -0.10830929,  0.0683216 ,  0.06814381, -0.02513012,
                      -0.09157088,  0.02680582, -0.29172918,  0.08072898,  0.05747896,
                      -0.19170919,  0.00717697, -0.11277784,  0.08857772])
VEC_32_1 = np.array([ 0.02379528,  0.11176362, -0.04999607,  0.12966942, -0.09261124,
                      -0.27095296,  0.36723797, -0.16656259,  0.06427004,  0.01017704,
                      0.05930205, -0.01973603, -0.12284076, -0.05676282, -0.03615846,
                      -0.13872099, -0.03112116, -0.17256421, -0.08623089,  0.10078231,
                      -0.07535792,  0.03355403, -0.07849675, -0.07776857,  0.08695795,
                      -0.01166083, -0.10767942, -0.0911717 , -0.06607173, -0.00191487,
                      -0.17283828, -0.28455561, -0.10627239,  0.02321795,  0.03753459,
                      0.10330878, -0.07272408,  0.07362469, -0.07832474, -0.20103907,
                      0.0165067 , -0.05446774,  0.14753859, -0.28961692, -0.13135064,
                      -0.10500028,  0.01642308, -0.11280917,  0.15528113,  0.09894446,
                      -0.17810057,  0.16117026,  0.14503561,  0.05785574, -0.1031358 ,
                      -0.06862185,  0.11791392,  0.06437142,  0.07089315,  0.08264123,
                      0.10122291, -0.00240967,  0.2071701 ,  0.14184164])
VEC_32_2 = np.array([-0.11439823, -0.06089337, -0.10456746, -0.21887056, -0.03880951,
                     0.1535284 ,  0.10932169,  0.0132894 , -0.07755339, -0.11128752,
                     -0.06952222, -0.05028565, -0.23907799,  0.09650613, -0.21198488,
                     -0.10047072, -0.01146564,  0.20271198,  0.08654478, -0.14185417,
                     0.09113476,  0.10390296, -0.05947423, -0.12170199,  0.17362963,
                     -0.12176913,  0.0179342 ,  0.02639644,  0.12485757, -0.06226371,
                     -0.21641378, -0.02032247, -0.02270991,  0.23134668, -0.28383917,
                     -0.04528644, -0.01303298, -0.0913954 , -0.12953001, -0.06495886,
                     -0.10040215, -0.04725199, -0.03528684,  0.01789166, -0.00390404,
                     0.09499208,  0.06170436, -0.15379282, -0.19080306, -0.03793831,
                     0.22190476, -0.10906399, -0.07348168, -0.08133682, -0.3275884 ,
                     0.06835074,  0.0890591 ,  0.1249184 ,  0.07022719,  0.05129346,
                     -0.11878162,  0.02372813,  0.13499111,  0.13181694])


if __name__=="__main__":
    vec_8 =generate_random_unit_gauss_3(8, 2, 3)


    vec_16 =generate_random_unit_gauss_3(16, 2, 3)
    vec_32 =generate_random_unit_gauss_3(32, 2, 3)
    print(vec_32)
    # Tests
    print(np.linalg.norm(VEC_8_0))
    print(np.linalg.norm(VEC_8_1))
    print(np.linalg.norm(VEC_8_2))
    print(VEC_8_0.dot(VEC_8_1))
    print(VEC_8_0.dot(VEC_8_2))
    print(VEC_8_2.dot(VEC_8_1))

    print(np.linalg.norm(VEC_16_0))
    print(np.linalg.norm(VEC_16_1))
    print(np.linalg.norm(VEC_16_2))
    print(VEC_16_0.dot(VEC_16_1))
    print(VEC_16_0.dot(VEC_16_2))
    print(VEC_16_2.dot(VEC_16_1))

    print(np.linalg.norm(VEC_32_0))
    print(np.linalg.norm(VEC_32_1))
    print(np.linalg.norm(VEC_32_2))
    print(VEC_32_0.dot(VEC_32_1))
    print(VEC_32_0.dot(VEC_32_2))
    print(VEC_32_2.dot(VEC_32_1))
    # print(vec[0])
    # print(vec[1])
    # print(vec[2])

